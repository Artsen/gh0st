# Sweep AI turns bugs & feature requests into code changes (https://sweep.dev)
# For details on our config file, check out our docs at https://docs.sweep.dev/usage/config

# This setting contains a list of rules that Sweep will check for. If any of these rules are broken in a new commit, Sweep will create an pull request to fix the broken rule.
rules:
- "All new business logic should have corresponding unit tests."
- "Refactor large functions to be more modular."
- "Add docstrings to all functions and file headers."

# This is the branch that Sweep will develop from and make pull requests to. Most people use 'main' or 'master' but some users also use 'dev' or 'staging'.
branch: 'main'

# By default Sweep will read the logs and outputs from your existing Github Actions. To disable this, set this to false.
gha_enabled: True

# This is the description of your project. It will be used by sweep when creating PRs. You can tell Sweep what's unique about your project, what frameworks you use, or anything else you want.
#
# Example:
#
# description: sweepai/sweep is a python project. The main api endpoints are in sweepai/api.py. Write code that adheres to PEP8.
description: GhostWriter is a WordPress plugin that connects to OpenAI API and allows users to generate high-quality blogs that are undetectable by AI content detection software. The plugin includes an admin panel where users can input their own API key and set the tone of the generated content. GhostWriter also includes an AI Content Detection agent that monitors the content generated by the plugin and checks for AI content detection. If AI content detection is found, the agent adjusts the content to stay high quality, but undetected by AI.


# This sets whether to create pull requests as drafts. If this is set to True, then all pull requests will be created as drafts and GitHub Actions will not be triggered.
draft: False

# This is a list of directories that Sweep will not be able to edit.
blocked_dirs: []

# This is a list of documentation links that Sweep will use to help it understand your code. You can add links to documentation for any packages you use here.
#
# Example:
#
# docs:
#   - PyGitHub: ["https://pygithub.readthedocs.io/en/latest/", "We use pygithub to interact with the GitHub API"]
docs: 
 - OpenAI API: ["https://platform.openai.com/docs/api-reference", "OpenAI API is used to call OpenAI calls"] 
 - LangChain: ["https://api.python.langchain.com/en/stable/api_reference.html", "LangChain is a LLM library for structing and handling llm calls"] 
 - LangChain Core: ["https://api.python.langchain.com/en/stable/core_api_reference.html", "LangChains core library of functions"] 
 - LangChain Experimental: ["https://api.python.langchain.com/en/stable/experimental_api_reference.html#", "Langchains Experimental library of functions"]
 - LangChain HTML Document Loader: ["https://python.langchain.com/docs/modules/data_connection/document_loaders/html", "Langchain HTML documenbt loader example"] 
 - LangChain Structured Tool Chat: ["https://python.langchain.com/docs/modules/agents/agent_types/structured_chat", "Langchain structured tool chat example"] 
 - LangChain OpenAI Multi-Function Agent: ["https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Langchain openai multifunctional agent example"] 
 - LangChain ReAct with Document Store Agent: ["https://python.langchain.com/docs/modules/agents/agent_types/react_docstore", "Langchain react documnent store agent example"]
 - LangChain Self Ask with Search Agent: ["https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search", "langchain self ask with search agent example"]
\

# Sandbox executes commands in a sandboxed environment to validate code changes after every edit to guarantee pristine code. For more details, see the [Sandbox](./sandbox) page.
sandbox:
  install:
    - trunk init
  check:
    - trunk fmt {file_path} || return 0
    - trunk check --fix --print-failures {file_path}
